// 循环语句

package main


// import (

// 	"fmt"

// )


// func main() {

// 	for i := 1; i <= 10; i++ {
// 		fmt.Printf(" %d", i)

// 	}

// }



// ——————————————————————
/*
break 语句用于终止 for 循环，继续执行 for 循环后面的语句。
下面的程序打印 1 到 5 之间的整数。请注意该程序中 break 的用法。
*/
// ---------------------------



// import (
// 	"fmt"
// )

// func main() {

// for i := 1; i <= 10; i++ {
// 	if i > 5 {
// 		break
// 	}
// 	fmt.Printf("%d", i)
// }	
// 	fmt.Printf("\nline after for loop")
// }



/*

continue 语句用于跳过 for 循环的当前迭代。循环体中 continue 语句之后的所有语句将被跳过不予执行。循环将继续执行下一次迭代。
让我们写一个程序利用 continue 来打印 1 到 10 之间的奇数。

*/
import (
	
	"fmt"

)


// func main() {

// 	for i := 1; i <= 10; i++ {
// 		if i % 2 == 0 {
// 			continue
// 		}
// 		fmt.Printf("%d ", i)
// 	}

// }

// -----------------
// 在上面的程序中，if i%2 == 0 检测 i 除以 2 的余数是否为 0，
// 如果为 0 则 i 是偶数，利用 continue 语句跳过当前迭代并继续下一次迭代。
// 因此 continue 语句之后的 fmt.Printf 语句将不被执行，并且循环进入到下一次迭代。上面的程序输出为：1 3 5 7 9 。
// ---------------

// 上面程序中的分号（;）也可以省略。这种形式的 for 循环可以视为 while 循环的替代品。上面的程序可以被重写如下：

// func main() {

// 	i := 0
// 	for i <= 10 {		
// 		fmt.Printf("%d", i)
// 		i += 2
// 	}
// }


// -----------
/*
可以在 for 循环中声明和操作多个变量，比如下面的程序：
*/
// ------------



// func main() {

// 	for no, i := 10, 1; i <= 10 && no <= 19; i, no = i+1, no+1 {
// 		fmt.Printf("%d * %d = %d\n", no, i, no*i)
// 	}
// }

// 上面的程序中，no 和 i 被声明并初始化为 10 和 1。它们在每次迭代结束时递增 1。
// 在 condition 部分使用 && 操作符来确保 i 小于或等于 10 并且 no 小于或等于 19。程序的输出如下：
/*

10 * 1 = 10  
11 * 2 = 22  
12 * 3 = 36  
13 * 4 = 52  
14 * 5 = 70  
15 * 6 = 90  
16 * 7 = 112  
17 * 8 = 136  
18 * 9 = 162  
19 * 10 = 190  

*/



// ----------------
// 可以用下面的语法实现无限循环：
// 下面的程序将一直打印 Hello World 永不终止。
// -----------------
// func main() {


// 	for {
// 		fmt.Println("Hello world")
// 	}
// }










